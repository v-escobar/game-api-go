// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package application

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/v-escobar/game-api-go/internal/domain/game"
	dto "github.com/v-escobar/game-api-go/internal/interfaces/dto"
)

// NewMockGameService creates a new instance of MockGameService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGameService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGameService {
	mock := &MockGameService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGameService is an autogenerated mock type for the GameService type
type MockGameService struct {
	mock.Mock
}

type MockGameService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGameService) EXPECT() *MockGameService_Expecter {
	return &MockGameService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockGameService
func (_mock *MockGameService) Create(d *dto.Game) error {
	ret := _mock.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*dto.Game) error); ok {
		r0 = returnFunc(d)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGameService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockGameService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - d
func (_e *MockGameService_Expecter) Create(d interface{}) *MockGameService_Create_Call {
	return &MockGameService_Create_Call{Call: _e.mock.On("Create", d)}
}

func (_c *MockGameService_Create_Call) Run(run func(d *dto.Game)) *MockGameService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.Game))
	})
	return _c
}

func (_c *MockGameService_Create_Call) Return(err error) *MockGameService_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGameService_Create_Call) RunAndReturn(run func(d *dto.Game) error) *MockGameService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockGameService
func (_mock *MockGameService) FindAll() ([]game.Game, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []game.Game
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]game.Game, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []game.Game); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]game.Game)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGameService_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockGameService_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockGameService_Expecter) FindAll() *MockGameService_FindAll_Call {
	return &MockGameService_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockGameService_FindAll_Call) Run(run func()) *MockGameService_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameService_FindAll_Call) Return(games []game.Game, err error) *MockGameService_FindAll_Call {
	_c.Call.Return(games, err)
	return _c
}

func (_c *MockGameService_FindAll_Call) RunAndReturn(run func() ([]game.Game, error)) *MockGameService_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function for the type MockGameService
func (_mock *MockGameService) FindById(id uint64) (*game.Game, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *game.Game
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint64) (*game.Game, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uint64) *game.Game); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*game.Game)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGameService_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockGameService_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id
func (_e *MockGameService_Expecter) FindById(id interface{}) *MockGameService_FindById_Call {
	return &MockGameService_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockGameService_FindById_Call) Run(run func(id uint64)) *MockGameService_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockGameService_FindById_Call) Return(game1 *game.Game, err error) *MockGameService_FindById_Call {
	_c.Call.Return(game1, err)
	return _c
}

func (_c *MockGameService_FindById_Call) RunAndReturn(run func(id uint64) (*game.Game, error)) *MockGameService_FindById_Call {
	_c.Call.Return(run)
	return _c
}
