// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package game

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/v-escobar/game-api-go/internal/domain/game"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository) Create(g *game.Game) error {
	ret := _mock.Called(g)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*game.Game) error); ok {
		r0 = returnFunc(g)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - g
func (_e *MockRepository_Expecter) Create(g interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", g)}
}

func (_c *MockRepository_Create_Call) Run(run func(g *game.Game)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*game.Game))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(err error) *MockRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(g *game.Game) error) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockRepository
func (_mock *MockRepository) FindAll() ([]game.Game, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []game.Game
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]game.Game, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []game.Game); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]game.Game)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockRepository_Expecter) FindAll() *MockRepository_FindAll_Call {
	return &MockRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockRepository_FindAll_Call) Run(run func()) *MockRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_FindAll_Call) Return(games []game.Game, err error) *MockRepository_FindAll_Call {
	_c.Call.Return(games, err)
	return _c
}

func (_c *MockRepository_FindAll_Call) RunAndReturn(run func() ([]game.Game, error)) *MockRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function for the type MockRepository
func (_mock *MockRepository) FindById(id uint64) (*game.Game, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *game.Game
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint64) (*game.Game, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uint64) *game.Game); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*game.Game)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id
func (_e *MockRepository_Expecter) FindById(id interface{}) *MockRepository_FindById_Call {
	return &MockRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockRepository_FindById_Call) Run(run func(id uint64)) *MockRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockRepository_FindById_Call) Return(game1 *game.Game, err error) *MockRepository_FindById_Call {
	_c.Call.Return(game1, err)
	return _c
}

func (_c *MockRepository_FindById_Call) RunAndReturn(run func(id uint64) (*game.Game, error)) *MockRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}
